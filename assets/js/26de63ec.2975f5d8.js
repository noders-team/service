"use strict";(self.webpackChunknoders_services=self.webpackChunknoders_services||[]).push([[3183],{7292:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"testnet-networks/celestia/install","title":"Installation","description":"Chain ID v1.11.0","source":"@site/docs/testnet-networks/celestia/install.md","sourceDirName":"testnet-networks/celestia","slug":"/testnet-networks/celestia/install","permalink":"/testnet-networks/celestia/install","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"hide_table_of_contents":false,"title":"Installation","sidebar_position":2},"sidebar":"testnetSidebar","previous":{"title":"Celestia","permalink":"/testnet-networks/celestia"},"next":{"title":"Upgrade","permalink":"/testnet-networks/celestia/upgrade"}}');var l=i(4848),a=i(8453);const t={hide_table_of_contents:!1,title:"Installation",sidebar_position:2},d="Installation",r={},o=[{value:"Chain ID: <code>mocha-4</code> | Current Node Version: <code>v1.11.0</code>",id:"chain-id-mocha-4--current-node-version-v1110",level:6},{value:"Install dependencies",id:"install-dependencies",level:2},{value:"Install GO",id:"install-go",level:2},{value:"Install with Cosmovisor",id:"install-with-cosmovisor",level:2},{value:"Download and build binaries",id:"download-and-build-binaries",level:3},{value:"Clone Celestia repo and build celestia-appd v1.11.0",id:"clone-celestia-repo-and-build-celestia-appd-v1110",level:3},{value:"Build binaries",id:"build-binaries",level:3},{value:"Prepare binaries for Cosmovisor",id:"prepare-binaries-for-cosmovisor",level:3},{value:"Create symlinks",id:"create-symlinks",level:3},{value:"Download and install Cosmovisor",id:"download-and-install-cosmovisor",level:2},{value:"Run node",id:"run-node",level:2},{value:"Create service",id:"create-service",level:3},{value:"Install without Cosmovisor",id:"install-without-cosmovisor",level:2},{value:"Download and build binaries",id:"download-and-build-binaries-1",level:3},{value:"Clone Celestia repo and build celestia-appd v1.11.0",id:"clone-celestia-repo-and-build-celestia-appd-v1110-1",level:3},{value:"Build binaries",id:"build-binaries-1",level:3},{value:"Run node",id:"run-node-1",level:2},{value:"Create service",id:"create-service-1",level:3},{value:"Enable service",id:"enable-service",level:3},{value:"Node configuration",id:"node-configuration",level:2},{value:"Set config",id:"set-config",level:3},{value:"Initialize the node",id:"initialize-the-node",level:3},{value:"Download genesis and addrbook",id:"download-genesis-and-addrbook",level:3},{value:"Add peers",id:"add-peers",level:3},{value:"Set minimum gas price",id:"set-minimum-gas-price",level:3},{value:"Set pruning",id:"set-pruning",level:3},{value:"Set custom ports",id:"set-custom-ports",level:3},{value:"Start node and check logs",id:"start-node-and-check-logs",level:3},{value:"Install Bridge Node",id:"install-bridge-node",level:2},{value:"Download and build binaries",id:"download-and-build-binaries-2",level:2},{value:"Add Bridge wallet",id:"add-bridge-wallet",level:2},{value:"Generate new wallet",id:"generate-new-wallet",level:3},{value:"Recover existing wallet",id:"recover-existing-wallet",level:3},{value:"Fund the wallet with testnet tokens",id:"fund-the-wallet-with-testnet-tokens",level:3},{value:"Initialize Bridge node",id:"initialize-bridge-node",level:3},{value:"Create service",id:"create-service-2",level:3},{value:"Start Bridge node",id:"start-bridge-node",level:3},{value:"Check Bridge node logs",id:"check-bridge-node-logs",level:3},{value:"Useful commands",id:"useful-commands",level:2},{value:"Get Bridge Node ID",id:"get-bridge-node-id",level:3},{value:"Get Bridge node key",id:"get-bridge-node-key",level:2},{value:"Check Bridge node wallet balance",id:"check-bridge-node-wallet-balance",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h6:"h6",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)("div",{class:"h1-with-icon icon-celestia",children:(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"installation",children:"Installation"})})}),"\n",(0,l.jsxs)(n.h6,{id:"chain-id-mocha-4--current-node-version-v1110",children:["Chain ID: ",(0,l.jsx)(n.code,{children:"mocha-4"})," | Current Node Version: ",(0,l.jsx)(n.code,{children:"v1.11.0"})]}),"\n",(0,l.jsx)(n.h2,{id:"install-dependencies",children:"Install dependencies"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"sudo apt -q update\nsudo apt -qy install curl git jq lz4 build-essential\nsudo apt -qy upgrade\n"})}),"\n",(0,l.jsx)(n.h2,{id:"install-go",children:"Install GO"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'ver="1.21.3" &&\nwget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" &&\nsudo rm -rf /usr/local/go &&\nsudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" &&\nrm "go$ver.linux-amd64.tar.gz" &&\necho "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile &&\nsource $HOME/.bash_profile &&\ngo version\n'})}),"\n",(0,l.jsx)(n.h2,{id:"install-with-cosmovisor",children:"Install with Cosmovisor"}),"\n",(0,l.jsx)(n.admonition,{title:"ADVANCED ROUTE",type:"note",children:(0,l.jsx)(n.p,{children:"Cosmosvisor is a process manager for Cosmos SDK application binaries that monitors the governance module for incoming chain upgrade proposals. If a proposal is approved, cosmosvisor can automatically download the new binary, stop the current one, switch to the new binary, and restart the node with the new binary."})}),"\n",(0,l.jsx)(n.h3,{id:"download-and-build-binaries",children:"Download and build binaries"}),"\n",(0,l.jsx)(n.h3,{id:"clone-celestia-repo-and-build-celestia-appd-v1110",children:"Clone Celestia repo and build celestia-appd v1.11.0"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"cd $HOME\ngit clone https://github.com/celestiaorg/celestia-app.git\ncd celestia-app\ngit checkout v1.11.0\n"})}),"\n",(0,l.jsx)(n.h3,{id:"build-binaries",children:"Build binaries"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"make install\n"})}),"\n",(0,l.jsx)(n.h3,{id:"prepare-binaries-for-cosmovisor",children:"Prepare binaries for Cosmovisor"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"cd $HOME\nmkdir -p ~/.celestia-app/cosmovisor/upgrades/v1.11.0/bin\nmv $HOME/go/bin/celestia-appd ~/.celestia-app/cosmovisor/upgrades/v1.11.0/bin/\n"})}),"\n",(0,l.jsx)(n.h3,{id:"create-symlinks",children:"Create symlinks"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"sudo ln -s ~/.celestia-app/cosmovisor/genesis ~/.celestia-app/cosmovisor/current -f\nsudo ln -s ~/.celestia-app/cosmovisor/current/bin/celestia-appd /usr/local/bin/celestia-appd -f\n"})}),"\n",(0,l.jsx)(n.h2,{id:"download-and-install-cosmovisor",children:"Download and install Cosmovisor"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@v1.5.0\n"})}),"\n",(0,l.jsx)(n.h2,{id:"run-node",children:"Run node"}),"\n",(0,l.jsx)(n.h3,{id:"create-service",children:"Create service"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'sudo tee /etc/systemd/system/celestia-appd.service > /dev/null << EOF\n[Unit]\nDescription=celestia node service\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=$(which cosmovisor) run start\nRestart=on-failure\nRestartSec=10\nLimitNOFILE=65535\nEnvironment="DAEMON_HOME=~/.celestia-app"\nEnvironment="DAEMON_NAME=celestia-appd"\nEnvironment="UNSAFE_SKIP_BACKUP=true"\nEnvironment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:~/.celestia-app/cosmovisor/current/bin"\n\n[Install]\nWantedBy=multi-user.target\nEOF\n'})}),"\n",(0,l.jsx)(n.h2,{id:"install-without-cosmovisor",children:"Install without Cosmovisor"}),"\n",(0,l.jsx)(n.h3,{id:"download-and-build-binaries-1",children:"Download and build binaries"}),"\n",(0,l.jsx)(n.h3,{id:"clone-celestia-repo-and-build-celestia-appd-v1110-1",children:"Clone Celestia repo and build celestia-appd v1.11.0"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"cd $HOME\ngit clone https://github.com/celestiaorg/celestia-app.git\ncd celestia-app\ngit checkout v1.11.0\n"})}),"\n",(0,l.jsx)(n.h3,{id:"build-binaries-1",children:"Build binaries"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"make install\n"})}),"\n",(0,l.jsx)(n.h2,{id:"run-node-1",children:"Run node"}),"\n",(0,l.jsx)(n.h3,{id:"create-service-1",children:"Create service"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'sudo tee /etc/systemd/system/celestia-appd.service > /dev/null << EOF\n[Unit]\nDescription=celestia node service\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=$(which celestia-appd) start\nRestart=on-failure\nRestartSec=10\nLimitNOFILE=65535\nEnvironment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"\n\n[Install]\nWantedBy=multi-user.target\nEOF\n'})}),"\n",(0,l.jsx)(n.h3,{id:"enable-service",children:"Enable service"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"sudo systemctl daemon-reload\nsudo systemctl enable celestia-appd\n"})}),"\n",(0,l.jsx)(n.h2,{id:"node-configuration",children:"Node configuration"}),"\n",(0,l.jsx)(n.h3,{id:"set-config",children:"Set config"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"celestia-appd config chain-id mocha-4\ncelestia-appd config keyring-backend os\ncelestia-appd config node tcp://localhost:26657\n"})}),"\n",(0,l.jsx)(n.h3,{id:"initialize-the-node",children:"Initialize the node"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"celestia-appd init NAME_OF_YOUR_VALIDATOR --chain-id mocha-4\n"})}),"\n",(0,l.jsx)(n.h3,{id:"download-genesis-and-addrbook",children:"Download genesis and addrbook"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"curl https://config-t.noders.services/celestia/genesis.json -o ~/.celestia-app/config/genesis.json\ncurl https://config-t.noders.services/celestia/addrbook.json -o ~/.celestia-app/config/addrbook.json\n"})}),"\n",(0,l.jsx)(n.h3,{id:"add-peers",children:"Add peers"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \\"6c3f75284e4bb6a31e54d531bb72dad2aeb76a60@celestia-t-rpc.noders.services:21656\\"/" ~/.celestia-app/config/config.toml\n'})}),"\n",(0,l.jsx)(n.h3,{id:"set-minimum-gas-price",children:"Set minimum gas price"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'sed -i -e "s|^minimum-gas-prices *=.*|minimum-gas-prices = \\"0.001utia\\"|" ~/.celestia-app/config/app.toml\n'})}),"\n",(0,l.jsx)(n.h3,{id:"set-pruning",children:"Set pruning"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"sed -i \\\n  -e 's|^pruning *=.*|pruning = \"custom\"|' \\\n  -e 's|^pruning-keep-recent *=.*|pruning-keep-recent = \"100\"|' \\\n  -e 's|^pruning-keep-every *=.*|pruning-keep-every = \"0\"|' \\\n  -e 's|^pruning-interval *=.*|pruning-interval = \"19\"|' \\\n  ~/.celestia-app/config/app.toml\n"})}),"\n",(0,l.jsx)(n.h3,{id:"set-custom-ports",children:"Set custom ports"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'echo "export celestia-appd_PORT="SET_YOUR_PORT"" >> $HOME/.bash_profile\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'# Set custom ports in app.toml\nsed -i.bak -e "s%:1317%:${celestia-appd_PORT}317%g" \\\n-e "s%:8080%:${celestia-appd_PORT}080%g" \\\n-e "s%:9090%:${celestia-appd_PORT}090%g" \\\n-e "s%:9091%:${celestia-appd_PORT}091%g" \\\n-e "s%:8545%:${celestia-appd_PORT}545%g" \\\n-e "s%:8546%:${celestia-appd_PORT}546%g" \\\n-e "s%:6065%:${celestia-appd_PORT}065%g" ~/.celestia-app/config/app.toml\n\n# Set custom ports in config.toml file\nsed -i.bak -e "s%:26658%:${celestia-appd_PORT}658%g" \\\n-e "s%:26657%:${celestia-appd_PORT}657%g" \\\n-e "s%:6060%:${celestia-appd_PORT}060%g" \\\n-e "s%:26656%:${celestia-appd_PORT}656%g" \\\n-e "s%:26660%:${celestia-appd_PORT}660%g" ~/.celestia-app/config/config.toml\n'})}),"\n",(0,l.jsx)(n.h3,{id:"start-node-and-check-logs",children:"Start node and check logs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"sudo systemctl start celestia-appd && sudo journalctl -u celestia-appd -f --no-hostname -o cat\n"})}),"\n",(0,l.jsx)(n.h2,{id:"install-bridge-node",children:"Install Bridge Node"}),"\n",(0,l.jsxs)(n.h1,{id:"official-documentation-httpsdocscelestiaorgnodesbridge-node",children:["Official documentation: ",(0,l.jsx)(n.code,{children:"https://docs.celestia.org/nodes/bridge-node"})]}),"\n",(0,l.jsx)(n.h2,{id:"download-and-build-binaries-2",children:"Download and build binaries"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"cd $HOME\nrm -rf celestia-node\ngit clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node\ngit checkout v0.14.0\nmake build\nsudo mv build/celestia /usr/local/bin\nmake cel-key\nsudo mv cel-key /usr/local/bin\n"})}),"\n",(0,l.jsx)(n.h2,{id:"add-bridge-wallet",children:"Add Bridge wallet"}),"\n",(0,l.jsx)(n.h3,{id:"generate-new-wallet",children:"Generate new wallet"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"cel-key add bridge-wallet --node.type bridge --p2p.network celestia\n"})}),"\n",(0,l.jsx)(n.h3,{id:"recover-existing-wallet",children:"Recover existing wallet"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"cel-key add bridge-wallet --node.type bridge --p2p.network celestia --recover\n"})}),"\n",(0,l.jsx)(n.h3,{id:"fund-the-wallet-with-testnet-tokens",children:"Fund the wallet with testnet tokens"}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsx)(n.p,{children:"Once you start the Bridge Node, a wallet key will be generated for you. You will need to fund that address with Testnet tokens to pay for PayForBlob transactions"})}),"\n",(0,l.jsx)(n.h3,{id:"initialize-bridge-node",children:"Initialize Bridge node"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"celestia bridge init \\\n  --keyring.accname bridge-wallet \\\n  --core.ip <PUBLIC OR YOUR NODE IP> \\\n  --core.rpc.port <PORT> \\\n  --core.grpc.port <PORT> \\\n  --p2p.network celestia \\\n  --rpc.port <PORT> \\\n  --gateway.port <PORT>\n"})}),"\n",(0,l.jsx)(n.h3,{id:"create-service-2",children:"Create service"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"sudo tee /etc/systemd/system/celestia-bridge.service > /dev/null << EOF\n[Unit]\nDescription=Celestia Bridge Node service\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=$(which celestia) bridge start \\\n--keyring.accname bridge-wallet \\\n--core.ip <PUBLIC OR YOUR NODE IP> \\\n--core.rpc.port <PORT> \\\n--core.grpc.port <PORT> \\\n--p2p.network celestia \\\n--rpc.port <PORT> \\\n--gateway.port <PORT> \\\n--metrics.tls=true \\\n--metrics \\\n--metrics.endpoint otel.celestia.observer \nRestart=on-failure\nRestartSec=10\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\nsudo systemctl daemon-reload\nsudo systemctl enable celestia-bridge.service\n"})}),"\n",(0,l.jsx)(n.h3,{id:"start-bridge-node",children:"Start Bridge node"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"sudo systemctl restart celestia-bridge.service\n"})}),"\n",(0,l.jsx)(n.h3,{id:"check-bridge-node-logs",children:"Check Bridge node logs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"sudo journalctl -fu celestia-bridge.service -o cat\n"})}),"\n",(0,l.jsx)(n.h2,{id:"useful-commands",children:"Useful commands"}),"\n",(0,l.jsx)(n.h3,{id:"get-bridge-node-id",children:"Get Bridge Node ID"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'AUTH_TOKEN=$(celestia bridge auth admin --p2p.network mocha-4)\ncurl -s -X POST -H "Authorization: Bearer $AUTH_TOKEN" -H \'Content-Type: application/json\' -d \'{"jsonrpc":"2.0","id":0,"method":"p2p.Info","params":[]}\' http://localhost:<PORT> | jq -r .result.ID\n'})}),"\n",(0,l.jsx)(n.h2,{id:"get-bridge-node-key",children:"Get Bridge node key"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"cel-key show bridge-wallet --node.type bridge --p2p.network mocha-4 -a | tail -1\n"})}),"\n",(0,l.jsx)(n.h2,{id:"check-bridge-node-wallet-balance",children:"Check Bridge node wallet balance"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"celestia-appd q bank balances $(cel-key show bridge-wallet --node.type bridge --p2p.network mocha-4 -a | tail -1)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var s=i(6540);const l={},a=s.createContext(l);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);