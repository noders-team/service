---
title: 'Installation Guide'
sidebar_position: 1
hide_title: true
hide_table_of_contents: false
description: ''
chain_name: '{{ chain_name }}'
scope: '{{ scope }}'
chain_id: '{{ chain_id }}'
binary_version: '{{ version }}'
icon_url: '{{ chain_icon }}'
---

import PageTitle from "@site/src/components/PageTitle";

<PageTitle
  iconUrl="img/{{ chain_icon }}"
  title="{{ chain_name }} Installation Guide"
  chainId="{{ chain_id }}"
  version="{{ version }}"
/>

## Install dependencies

```js
sudo apt -q update
sudo apt -qy install curl git jq lz4 build-essential
sudo apt -qy upgrade
```

## Install GO

```js
ver="1.21.3" &&
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" &&
sudo rm -rf /usr/local/go &&
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" &&
rm "go$ver.linux-amd64.tar.gz" &&
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile &&
source $HOME/.bash_profile &&
go version
```

## Install with Cosmovisor

:::note ADVANCED ROUTE

Cosmosvisor is a process manager for Cosmos SDK application binaries that monitors the governance module for incoming chain upgrade proposals. If a proposal is approved, cosmosvisor can automatically download the new binary, stop the current one, switch to the new binary, and restart the node with the new binary.

:::

### Download and build binaries

### Clone {{ chain_name }} repo and build {{ daemon_name }} {{ version }}

```js
cd $HOME
git clone {{ social_github }}.git
cd {{ github_folder_name }}
git checkout {{ version }}
```

### Build binaries

```js
make install
```

### Prepare binaries for Cosmovisor

```js
cd $HOME
mkdir -p {{ daemon_home }}/cosmovisor/upgrades/{{ version }}/bin
mv $HOME/go/bin/{{ daemon_name }} {{ daemon_home }}/cosmovisor/upgrades/{{ version }}/bin/
```

### Create symlinks

```js
sudo ln -s {{ daemon_home }}/cosmovisor/genesis {{ daemon_home }}/cosmovisor/current -f
sudo ln -s {{ daemon_home }}/cosmovisor/current/bin/{{ daemon_name }} /usr/local/bin/{{ daemon_name }} -f
```

## Download and install Cosmovisor

```js
go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@v1.7.0
```

## Run node

### Create service

```js
sudo tee /etc/systemd/system/{{ daemon_name }}.service > /dev/null << EOF
[Unit]
Description={{ chain_system_name }} node service
After=network-online.target

[Service]
User=$USER
ExecStart=$(which cosmovisor) run start
Restart=on-failure
RestartSec=10
LimitNOFILE=65535
Environment="DAEMON_HOME={{ daemon_home }}"
Environment="DAEMON_NAME={{ daemon_name }}"
Environment="UNSAFE_SKIP_BACKUP=true"
Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:{{ daemon_home }}/cosmovisor/current/bin"

[Install]
WantedBy=multi-user.target
EOF
```

## Install without Cosmovisor

### Download and build binaries

### Clone {{ chain_name }} repo and build {{ daemon_name }} {{ version }}

```js
cd $HOME
git clone {{ social_github }}.git
cd {{ github_folder_name }}
git checkout {{ version }}
```

### Build binaries

```js
make install
```

## Run node

### Create service

```js
sudo tee /etc/systemd/system/{{ daemon_name }}.service > /dev/null << EOF
[Unit]
Description={{ chain_system_name }} node service
After=network-online.target

[Service]
User=$USER
ExecStart=$(which {{ daemon_name }}) start
Restart=on-failure
RestartSec=10
LimitNOFILE=65535
Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"

[Install]
WantedBy=multi-user.target
EOF
```

### Enable service

```js
sudo systemctl daemon-reload
sudo systemctl enable {{ daemon_name }}
```

## Node configuration

### Set config

```js
{{ daemon_name }} config chain-id {{ chain_id }}
{{ daemon_name }} config keyring-backend os
{{ daemon_name }} config node tcp://localhost:26657
```

### Initialize the node

```js
{{ daemon_name }} init NAME_OF_YOUR_VALIDATOR --chain-id {{ chain_id }}
```

### Download genesis and addrbook

```js
curl https://snapshots-t.noders.services/{{ chain_system_name }}/genesis.json -o {{ daemon_home }}/config/genesis.json
curl https://snapshots-t.noders.services/{{ chain_system_name }}/addrbook.json -o {{ daemon_home }}/config/addrbook.json
```

### Add peers

```js
sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \"{{ endpoint_peer }}\"/" {{ daemon_home }}/config/config.toml
```

### Set minimum gas price

```js
sed -i -e "s|^minimum-gas-prices *=.*|minimum-gas-prices = \"0.001{{ chain_denom }}\"|" {{ daemon_home }}/config/app.toml
```

### Set pruning

```js
sed -i \
  -e 's|^pruning *=.*|pruning = "custom"|' \
  -e 's|^pruning-keep-recent *=.*|pruning-keep-recent = "100"|' \
  -e 's|^pruning-keep-every *=.*|pruning-keep-every = "0"|' \
  -e 's|^pruning-interval *=.*|pruning-interval = "19"|' \
  {{ daemon_home }}/config/app.toml
```

### Set custom ports

```bash
echo "export {{ daemon_name.upper() }}_PORT="SET_YOUR_PORT"" >> $HOME/.bash_profile
```

```js
# Set custom ports in app.toml
sed -i.bak -e "s%:1317%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}317%g" \
-e "s%:8080%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}080%g" \
-e "s%:9090%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}090%g" \
-e "s%:9091%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}091%g" \
-e "s%:8545%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}545%g" \
-e "s%:8546%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}546%g" \
-e "s%:6065%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}065%g" {{ daemon_home }}/config/app.toml

# Set custom ports in config.toml file
sed -i.bak -e "s%:26658%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}658%g" \
-e "s%:26657%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}657%g" \
-e "s%:6060%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}060%g" \
-e "s%:26656%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}656%g" \
-e "s%:26660%:${{ '{' }}{{ daemon_name.upper() }}_PORT{{ '}' }}660%g" {{ daemon_home }}/config/config.toml
```