---
title: 'Monitoring'
sidebar_position: 7
hide_title: true
hide_table_of_contents: false
description: ''
chain_name: '{{ chain_name }}'
scope: '{{ scope }}'
chain_id: '{{ chain_id }}'
binary_version: '{{ version }}'
icon_url: '{{ chain_icon }}'
---

import PageTitle from "@site/src/components/PageTitle";

<PageTitle
  iconUrl="img/{{ chain_icon }}"
  title="{{ chain_name }} Monitoring Setup"
  chainId="{{ chain_id }}"
  version="{{ version }}"
/>

## Monitoring Stack

This guide helps you set up comprehensive monitoring for your {{ chain_name }} validator node using Prometheus and Grafana.

### Prerequisites

- Docker and Docker Compose installed
- {{ chain_name }} node running with metrics enabled
- Ports {{ monitoring_prometheus_port | default('9090') }} (Prometheus) and {{ monitoring_grafana_port | default('3000') }} (Grafana) available

### Step 1: Enable Metrics in {{ chain_name }} Node

Edit your `config.toml` file:

```toml title="config.toml"
# Enable metrics
prometheus = true
prometheus_listen_addr = "{{ monitoring_node_metrics_port | default('26660') }}"
```

Restart your {{ daemon_name }} service:

```bash
sudo systemctl restart {{ daemon_name }}
```

### Step 2: Create Monitoring Directory

```bash
mkdir -p $HOME/{{ chain_system_name }}-monitoring
cd $HOME/{{ chain_system_name }}-monitoring
```

### Step 3: Docker Compose Configuration

Create `docker-compose.yml`:

```yaml title="docker-compose.yml"
version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: {{ chain_system_name }}-prometheus
    ports:
      - "{{ monitoring_prometheus_port | default('9090') }}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: {{ chain_system_name }}-grafana
    ports:
      - "{{ monitoring_grafana_port | default('3000') }}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD={{ monitoring_grafana_password | default('admin123') }}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
```

### Step 4: Prometheus Configuration

Create `prometheus.yml`:

```yaml title="prometheus.yml"
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "alert_rules.yml"

scrape_configs:
  - job_name: '{{ chain_system_name }}-validator'
    static_configs:
      - targets: ['host.docker.internal:{{ monitoring_node_metrics_port | default('26660') }}']
    scrape_interval: 10s
    metrics_path: /metrics

  - job_name: 'node-exporter'
    static_configs:
      - targets: ['host.docker.internal:9100']
    scrape_interval: 15s

alerting:
  alertmanagers:
    - static_configs:
        - targets: []
```

### Step 5: Alert Rules

Create `alert_rules.yml`:

```yaml title="alert_rules.yml"
groups:
  - name: {{ chain_system_name }}-validator-alerts
    rules:
      - alert: ValidatorDown
        expr: up{job="{{ chain_system_name }}-validator"} == 0
        for: 1m
        labels:
          severity: critical
          chain: {{ chain_name }}
        annotations:
          summary: "{{ chain_name }} validator is down"
          description: "{{ chain_name }} validator has been down for more than 1 minute"

      - alert: NodeNotSyncing
        expr: tendermint_consensus_height - tendermint_consensus_latest_block_height > 10
        for: 5m
        labels:
          severity: warning
          chain: {{ chain_name }}
        annotations:
          summary: "{{ chain_name }} node is not syncing"
          description: "{{ chain_name }} node is behind by {{ "{{ $value }}" }} blocks"

      - alert: MissedBlocks
        expr: tendermint_consensus_validator_missed_blocks > {{ monitoring_max_missed_blocks | default('5') }}
        for: 2m
        labels:
          severity: warning
          chain: {{ chain_name }}
        annotations:
          summary: "{{ chain_name }} validator missing blocks"
          description: "{{ chain_name }} validator has missed {{ "{{ $value }}" }} blocks"

      - alert: HighMemoryUsage
        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes > 0.9
        for: 5m
        labels:
          severity: warning
          chain: {{ chain_name }}
        annotations:
          summary: "High memory usage on {{ chain_name }} validator"
          description: "Memory usage is above 90%"

      - alert: DiskSpaceLow
        expr: node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"} < 0.1
        for: 1m
        labels:
          severity: critical
          chain: {{ chain_name }}
        annotations:
          summary: "Low disk space on {{ chain_name }} validator"
          description: "Disk space is below 10%"
```

### Step 6: Grafana Datasource Configuration

Create `grafana/datasources/prometheus.yml`:

```bash
mkdir -p grafana/datasources grafana/dashboards
```

```yaml title="grafana/datasources/prometheus.yml"
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    editable: true
```

### Step 7: Launch Monitoring Stack

```bash
# Start the monitoring stack
docker-compose up -d

# Check status
docker-compose ps

# View logs
docker-compose logs -f
```

### Step 8: Access Dashboards

{% if monitoring_grafana_port %}
- **Grafana Dashboard**: http://localhost:{{ monitoring_grafana_port }}
{% else %}
- **Grafana Dashboard**: http://localhost:3000
{% endif %}
  - Username: `admin`
  - Password: `{{ monitoring_grafana_password | default('admin123') }}`

{% if monitoring_prometheus_port %}
- **Prometheus**: http://localhost:{{ monitoring_prometheus_port }}
{% else %}
- **Prometheus**: http://localhost:9090
{% endif %}

### Pre-built Dashboard

Import our {{ chain_name }} validator dashboard using ID: `{{ monitoring_dashboard_id | default('15991') }}` or download JSON from:

**Dashboard Features:**
- Validator status and uptime
- Block height and sync status  
- Missed blocks tracking
- System resources (CPU, Memory, Disk)
- Network metrics
- Peer connections

### Useful Queries

**Validator Status:**
```promql
up{job="{{ chain_system_name }}-validator"}
```

**Block Height:**
```promql
tendermint_consensus_height
```

**Missed Blocks:**
```promql
tendermint_consensus_validator_missed_blocks
```

**Memory Usage:**
```promql
(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100
```

### Troubleshooting

**Metrics not showing up:**
```bash
# Check if metrics endpoint is accessible
curl http://localhost:{{ monitoring_node_metrics_port | default('26660') }}/metrics

# Check Prometheus targets
curl http://localhost:{{ monitoring_prometheus_port | default('9090') }}/api/v1/targets
```

**Grafana connection issues:**
```bash
# Check Grafana logs
docker-compose logs grafana

# Restart Grafana
docker-compose restart grafana
```

### Advanced Configuration

**Add more exporters:**
- **Node Exporter**: System metrics
- **Process Exporter**: {{ daemon_name }} process metrics  
- **Blackbox Exporter**: Endpoint monitoring

**Custom Alerts:**
Edit `alert_rules.yml` to add chain-specific alert rules based on your validator requirements.

:::tip Pro Tip
Set up alerting notifications (Slack, Discord, Email) by configuring Alertmanager for real-time validator monitoring.
:::

### Cleanup

To stop and remove the monitoring stack:

```bash
docker-compose down -v
``` 